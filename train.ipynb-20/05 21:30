{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "train.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "machine_shape": "hm",
      "mount_file_id": "1STABCCX2jxLSPDYAaoHvYy9Z5fG6sYP4",
      "authorship_tag": "ABX9TyMEZPJpeh9NlwFudjpaOM79",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Hwajun1323/ML/blob/master/train.ipynb-20/05%2021%3A30\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-lJjS99is-Fw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a3da9728-eebd-48d4-9240-9b6cdfc27dda"
      },
      "source": [
        "pip install keras-metrics"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: keras-metrics in /usr/local/lib/python3.7/dist-packages (1.1.0)\n",
            "Requirement already satisfied: Keras>=2.1.5 in /usr/local/lib/python3.7/dist-packages (from keras-metrics) (2.4.3)\n",
            "Requirement already satisfied: scipy>=0.14 in /usr/local/lib/python3.7/dist-packages (from Keras>=2.1.5->keras-metrics) (1.4.1)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from Keras>=2.1.5->keras-metrics) (3.13)\n",
            "Requirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.7/dist-packages (from Keras>=2.1.5->keras-metrics) (1.19.5)\n",
            "Requirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (from Keras>=2.1.5->keras-metrics) (2.10.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from h5py->Keras>=2.1.5->keras-metrics) (1.15.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GQ0gCXmlfZX8"
      },
      "source": [
        "import keras\n",
        "from keras import applications\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "from keras import optimizers\n",
        "from keras.models import Sequential, Model\n",
        "from keras.layers import *\n",
        "from keras.callbacks import ModelCheckpoint, LearningRateScheduler, TensorBoard, EarlyStopping\n",
        "\n",
        "import os\n",
        "import cv2\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import cross_val_score , cross_validate\n",
        "import keras_metrics as km\n",
        "\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.metrics import recall_score\n",
        "from sklearn.metrics import f1_score\n",
        "from sklearn.metrics import cohen_kappa_score\n",
        "from sklearn.metrics import roc_auc_score\n",
        "from sklearn.metrics import multilabel_confusion_matrix\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CiVFsiIWffUd"
      },
      "source": [
        "data_dir = \"/content/drive/My Drive/dataset/video_data\"\n",
        "#data_dir = \"video_data/\"\n",
        "img_height, img_width = 64, 64\n",
        "seq_len = 70\n",
        "\n",
        "classes = [\"Child's room\",  \"Museum\", \"Office\", \"Restaurant\"]\n",
        "num_classes = len(classes)\n",
        "print(\"Number of Class: \", num_classes)\n",
        "\n",
        "#  Creating frames from videos\n",
        "\n",
        "def frames_extraction(video_path):\n",
        "    frames_list = []\n",
        "\n",
        "    vidObj = cv2.VideoCapture(video_path)\n",
        "    # Used as counter variable\n",
        "    count = 1\n",
        "\n",
        "    while count <= seq_len:\n",
        "        success, image = vidObj.read()\n",
        "        if success:\n",
        "            image = cv2.resize(image, (img_height, img_width))\n",
        "            frames_list.append(image)\n",
        "            count += 1\n",
        "        else:\n",
        "            print(\"Defected frame\")\n",
        "            break\n",
        "\n",
        "    return frames_list\n",
        "\n",
        "# Create the actual data from the sequence of images\n",
        "\n",
        "def create_data(input_dir):\n",
        "    X = []\n",
        "    Y = []\n",
        "\n",
        "    classes_list = os.listdir(input_dir)\n",
        "\n",
        "    for c in classes_list:\n",
        "        print(c)\n",
        "        files_list = os.listdir(os.path.join(input_dir, c))\n",
        "        for f in files_list:\n",
        "            frames = frames_extraction(os.path.join(os.path.join(input_dir, c), f))\n",
        "            if len(frames) == seq_len:\n",
        "                X.append(frames)\n",
        "\n",
        "                y = [0] * len(classes)\n",
        "                y[classes.index(c)] = 1\n",
        "                Y.append(y)\n",
        "\n",
        "    X = np.asarray(X)\n",
        "    Y = np.asarray(Y)\n",
        "    \n",
        "    return X, Y"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G6nClQdnRTwb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 401
        },
        "outputId": "9a48ec96-a35c-42b5-eb1f-38d4d2c77a79"
      },
      "source": [
        "X, Y = create_data(data_dir)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, shuffle=True, random_state=0)\n",
        "\n",
        "print(X_train.shape)\n",
        "print(X_test.shape)\n",
        "print(y_train.shape)\n",
        "print(y_test.shape)\n"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Restaurant\n",
            "Museum\n",
            "Office\n",
            "Defected frame\n",
            "Defected frame\n",
            "Child's room\n",
            "(816, 70, 64, 64, 3)\n",
            "(205, 70, 64, 64, 3)\n",
            "(816, 4)\n",
            "(205, 4)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-24-db4e49e27ff0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'x' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h_v-9iPAIv_E",
        "outputId": "fd2285a5-3c4f-4130-a2a4-e7e925ba462e"
      },
      "source": [
        "model = Sequential()\n",
        "\n",
        "model.add(ConvLSTM2D(filters=64, kernel_size=(3, 3), return_sequences=False, data_format=\"channels_last\", input_shape=(seq_len, img_height, img_width, 3)))\n",
        "model.add(Dropout(0.3))\n",
        "\n",
        "model.add(BatchNormalization())\n",
        "model.add(MaxPooling2D(pool_size = (2, 2)))\n",
        "#model.add(GlobalAveragePooling2D())\n",
        "\n",
        "model.add(Flatten())\n",
        "model.add(Dense(256, activation=\"relu\"))\n",
        "model.add(Dropout(0.3))\n",
        "model.add(Dense(256, activation=\"relu\"))\n",
        "model.add(Dropout(0.3))\n",
        "model.add(Dense(128, activation=\"relu\"))\n",
        "model.add(Dropout(0.3))\n",
        "model.add(Dense(num_classes, activation=\"softmax\"))\n",
        "\n",
        "model.summary()\n",
        "\n",
        "opt = keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)\n",
        "#opt = keras.optimizers.SGD(lr=0.001)\n",
        "model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=[\"accuracy\"])\n",
        "\n",
        "earlystop = EarlyStopping(patience=7)\n",
        "callbacks = [earlystop]\n",
        "\n",
        "#history = model.fit(x=X_train, y=y_train, epochs=40, batch_size=8, shuffle=True, validation_split=0.2, callbacks=callbacks)\n",
        "history = model.fit(x=X_train, y=y_train, epochs=60, batch_size=11, shuffle=True, validation_split=0.2)\n",
        "print(\"Accuracy : %.4f\" % (model.evaluate(X_test, y_test)[1]))\n",
        "\n",
        "#scores = cross_val_score(history, X_train, y_train, cv=3)\n",
        "# Trainingdata\n",
        "#print('cross validation check accuracy:',np.round(scores, 4))\n",
        "#print('mean check accuracy', np.round(np.mean(scores), 4))\n",
        "\n",
        "# Result\n",
        "loss, acc = model.evaluate(X_test, y_test)\n",
        "print(model.evaluate(X_test, y_test))\n"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_7\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv_lst_m2d_7 (ConvLSTM2D)  (None, 62, 62, 64)        154624    \n",
            "_________________________________________________________________\n",
            "dropout_28 (Dropout)         (None, 62, 62, 64)        0         \n",
            "_________________________________________________________________\n",
            "batch_normalization_7 (Batch (None, 62, 62, 64)        256       \n",
            "_________________________________________________________________\n",
            "max_pooling2d_7 (MaxPooling2 (None, 31, 31, 64)        0         \n",
            "_________________________________________________________________\n",
            "flatten_7 (Flatten)          (None, 61504)             0         \n",
            "_________________________________________________________________\n",
            "dense_28 (Dense)             (None, 256)               15745280  \n",
            "_________________________________________________________________\n",
            "dropout_29 (Dropout)         (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense_29 (Dense)             (None, 256)               65792     \n",
            "_________________________________________________________________\n",
            "dropout_30 (Dropout)         (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense_30 (Dense)             (None, 128)               32896     \n",
            "_________________________________________________________________\n",
            "dropout_31 (Dropout)         (None, 128)               0         \n",
            "_________________________________________________________________\n",
            "dense_31 (Dense)             (None, 4)                 516       \n",
            "=================================================================\n",
            "Total params: 15,999,364\n",
            "Trainable params: 15,999,236\n",
            "Non-trainable params: 128\n",
            "_________________________________________________________________\n",
            "Epoch 1/60\n",
            "60/60 [==============================] - 32s 491ms/step - loss: 9.2493 - accuracy: 0.3175 - val_loss: 1.4872 - val_accuracy: 0.4146\n",
            "Epoch 2/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 2.8521 - accuracy: 0.3558 - val_loss: 2.3085 - val_accuracy: 0.2439\n",
            "Epoch 3/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.7908 - accuracy: 0.3868 - val_loss: 2.8021 - val_accuracy: 0.3171\n",
            "Epoch 4/60\n",
            "60/60 [==============================] - 29s 485ms/step - loss: 1.5588 - accuracy: 0.4302 - val_loss: 3.0395 - val_accuracy: 0.2561\n",
            "Epoch 5/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3721 - accuracy: 0.4272 - val_loss: 2.0889 - val_accuracy: 0.2622\n",
            "Epoch 6/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3162 - accuracy: 0.4379 - val_loss: 1.8503 - val_accuracy: 0.3415\n",
            "Epoch 7/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3123 - accuracy: 0.4302 - val_loss: 1.7507 - val_accuracy: 0.3415\n",
            "Epoch 8/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3096 - accuracy: 0.4291 - val_loss: 1.7376 - val_accuracy: 0.3354\n",
            "Epoch 9/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3318 - accuracy: 0.4360 - val_loss: 1.7265 - val_accuracy: 0.3902\n",
            "Epoch 10/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.2955 - accuracy: 0.4520 - val_loss: 1.6897 - val_accuracy: 0.4146\n",
            "Epoch 11/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3366 - accuracy: 0.4035 - val_loss: 1.6867 - val_accuracy: 0.3780\n",
            "Epoch 12/60\n",
            "60/60 [==============================] - 29s 485ms/step - loss: 1.3086 - accuracy: 0.4179 - val_loss: 1.7030 - val_accuracy: 0.3780\n",
            "Epoch 13/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3241 - accuracy: 0.4138 - val_loss: 1.7155 - val_accuracy: 0.3720\n",
            "Epoch 14/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3193 - accuracy: 0.4161 - val_loss: 1.7212 - val_accuracy: 0.3902\n",
            "Epoch 15/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3034 - accuracy: 0.4322 - val_loss: 1.7273 - val_accuracy: 0.3780\n",
            "Epoch 16/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3107 - accuracy: 0.4224 - val_loss: 1.7263 - val_accuracy: 0.3720\n",
            "Epoch 17/60\n",
            "60/60 [==============================] - 29s 485ms/step - loss: 1.3152 - accuracy: 0.4207 - val_loss: 1.7323 - val_accuracy: 0.3537\n",
            "Epoch 18/60\n",
            "60/60 [==============================] - 29s 485ms/step - loss: 1.3852 - accuracy: 0.4167 - val_loss: 1.8489 - val_accuracy: 0.3598\n",
            "Epoch 19/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3685 - accuracy: 0.3955 - val_loss: 1.8087 - val_accuracy: 0.3232\n",
            "Epoch 20/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3322 - accuracy: 0.3953 - val_loss: 1.8419 - val_accuracy: 0.3110\n",
            "Epoch 21/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3070 - accuracy: 0.4174 - val_loss: 1.8824 - val_accuracy: 0.3049\n",
            "Epoch 22/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3229 - accuracy: 0.4070 - val_loss: 1.8984 - val_accuracy: 0.3171\n",
            "Epoch 23/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3203 - accuracy: 0.4098 - val_loss: 1.9105 - val_accuracy: 0.3171\n",
            "Epoch 24/60\n",
            "60/60 [==============================] - 29s 485ms/step - loss: 1.3104 - accuracy: 0.4337 - val_loss: 1.9143 - val_accuracy: 0.3171\n",
            "Epoch 25/60\n",
            "60/60 [==============================] - 29s 485ms/step - loss: 1.3189 - accuracy: 0.4154 - val_loss: 1.9221 - val_accuracy: 0.3110\n",
            "Epoch 26/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3257 - accuracy: 0.4169 - val_loss: 1.9205 - val_accuracy: 0.3110\n",
            "Epoch 27/60\n",
            "60/60 [==============================] - 29s 485ms/step - loss: 1.3370 - accuracy: 0.3958 - val_loss: 1.9083 - val_accuracy: 0.3049\n",
            "Epoch 28/60\n",
            "60/60 [==============================] - 29s 485ms/step - loss: 1.3069 - accuracy: 0.4262 - val_loss: 1.9377 - val_accuracy: 0.3049\n",
            "Epoch 29/60\n",
            "60/60 [==============================] - 29s 485ms/step - loss: 1.3132 - accuracy: 0.4264 - val_loss: 1.9085 - val_accuracy: 0.3537\n",
            "Epoch 30/60\n",
            "60/60 [==============================] - 29s 488ms/step - loss: 1.3065 - accuracy: 0.4302 - val_loss: 1.9164 - val_accuracy: 0.3293\n",
            "Epoch 31/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3264 - accuracy: 0.4033 - val_loss: 1.9244 - val_accuracy: 0.3293\n",
            "Epoch 32/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3127 - accuracy: 0.4218 - val_loss: 1.9197 - val_accuracy: 0.3232\n",
            "Epoch 33/60\n",
            "60/60 [==============================] - 29s 487ms/step - loss: 1.3115 - accuracy: 0.4351 - val_loss: 1.9246 - val_accuracy: 0.3110\n",
            "Epoch 34/60\n",
            "60/60 [==============================] - 29s 488ms/step - loss: 1.3235 - accuracy: 0.4094 - val_loss: 1.9355 - val_accuracy: 0.3110\n",
            "Epoch 35/60\n",
            "60/60 [==============================] - 29s 490ms/step - loss: 1.3096 - accuracy: 0.4196 - val_loss: 1.9212 - val_accuracy: 0.3049\n",
            "Epoch 36/60\n",
            "60/60 [==============================] - 29s 488ms/step - loss: 1.3297 - accuracy: 0.3896 - val_loss: 1.9073 - val_accuracy: 0.3110\n",
            "Epoch 37/60\n",
            "60/60 [==============================] - 29s 488ms/step - loss: 1.2953 - accuracy: 0.4438 - val_loss: 1.9163 - val_accuracy: 0.3110\n",
            "Epoch 38/60\n",
            "60/60 [==============================] - 29s 488ms/step - loss: 1.2958 - accuracy: 0.4522 - val_loss: 1.9179 - val_accuracy: 0.3110\n",
            "Epoch 39/60\n",
            "60/60 [==============================] - 29s 488ms/step - loss: 1.3160 - accuracy: 0.4182 - val_loss: 1.9168 - val_accuracy: 0.3110\n",
            "Epoch 40/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3051 - accuracy: 0.4362 - val_loss: 1.9175 - val_accuracy: 0.3110\n",
            "Epoch 41/60\n",
            "60/60 [==============================] - 29s 487ms/step - loss: 1.3096 - accuracy: 0.4252 - val_loss: 1.9238 - val_accuracy: 0.3110\n",
            "Epoch 42/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3265 - accuracy: 0.4056 - val_loss: 1.9098 - val_accuracy: 0.2988\n",
            "Epoch 43/60\n",
            "60/60 [==============================] - 29s 488ms/step - loss: 1.3321 - accuracy: 0.4045 - val_loss: 1.9074 - val_accuracy: 0.2988\n",
            "Epoch 44/60\n",
            "60/60 [==============================] - 29s 488ms/step - loss: 1.3089 - accuracy: 0.4317 - val_loss: 1.9011 - val_accuracy: 0.2988\n",
            "Epoch 45/60\n",
            "60/60 [==============================] - 29s 487ms/step - loss: 1.2948 - accuracy: 0.4495 - val_loss: 1.8969 - val_accuracy: 0.3049\n",
            "Epoch 46/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3196 - accuracy: 0.4076 - val_loss: 1.8909 - val_accuracy: 0.2988\n",
            "Epoch 47/60\n",
            "60/60 [==============================] - 29s 488ms/step - loss: 1.3128 - accuracy: 0.4143 - val_loss: 1.9079 - val_accuracy: 0.2988\n",
            "Epoch 48/60\n",
            "60/60 [==============================] - 29s 488ms/step - loss: 1.3138 - accuracy: 0.4210 - val_loss: 1.8988 - val_accuracy: 0.2988\n",
            "Epoch 49/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3147 - accuracy: 0.4172 - val_loss: 1.8910 - val_accuracy: 0.3110\n",
            "Epoch 50/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3185 - accuracy: 0.4113 - val_loss: 1.9033 - val_accuracy: 0.3110\n",
            "Epoch 51/60\n",
            "60/60 [==============================] - 29s 487ms/step - loss: 1.3318 - accuracy: 0.3915 - val_loss: 1.9131 - val_accuracy: 0.3049\n",
            "Epoch 52/60\n",
            "60/60 [==============================] - 29s 489ms/step - loss: 1.3098 - accuracy: 0.4273 - val_loss: 1.8953 - val_accuracy: 0.3110\n",
            "Epoch 53/60\n",
            "60/60 [==============================] - 29s 488ms/step - loss: 1.2921 - accuracy: 0.4584 - val_loss: 1.8988 - val_accuracy: 0.3171\n",
            "Epoch 54/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.2942 - accuracy: 0.4427 - val_loss: 1.9023 - val_accuracy: 0.3110\n",
            "Epoch 55/60\n",
            "60/60 [==============================] - 29s 487ms/step - loss: 1.2965 - accuracy: 0.4374 - val_loss: 1.9052 - val_accuracy: 0.3110\n",
            "Epoch 56/60\n",
            "60/60 [==============================] - 29s 487ms/step - loss: 1.3351 - accuracy: 0.3872 - val_loss: 1.8976 - val_accuracy: 0.3110\n",
            "Epoch 57/60\n",
            "60/60 [==============================] - 29s 488ms/step - loss: 1.3264 - accuracy: 0.4077 - val_loss: 1.8833 - val_accuracy: 0.3171\n",
            "Epoch 58/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3182 - accuracy: 0.4124 - val_loss: 1.8833 - val_accuracy: 0.3110\n",
            "Epoch 59/60\n",
            "60/60 [==============================] - 29s 487ms/step - loss: 1.3173 - accuracy: 0.4199 - val_loss: 1.8894 - val_accuracy: 0.3049\n",
            "Epoch 60/60\n",
            "60/60 [==============================] - 29s 486ms/step - loss: 1.3560 - accuracy: 0.3755 - val_loss: 1.8926 - val_accuracy: 0.3110\n",
            "7/7 [==============================] - 2s 306ms/step - loss: 1.4972 - accuracy: 0.3024\n",
            "Accuracy : 0.3024\n",
            "7/7 [==============================] - 2s 305ms/step - loss: 1.4972 - accuracy: 0.3024\n",
            "7/7 [==============================] - 2s 306ms/step - loss: 1.4972 - accuracy: 0.3024\n",
            "[1.4971528053283691, 0.30243903398513794]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IYnev14UAi_m",
        "outputId": "35a824a9-934c-42d8-e409-45bdb8a6fb56"
      },
      "source": [
        "# Result\n",
        "print(\"Accuracy : %.4f\" % (model.evaluate(X_test, y_test)[1]))\n",
        "\n",
        "loss, acc = model.evaluate(X_test, y_test)\n",
        "print(\"\\nLoss: {}, Acc: {}\".format(loss,acc))"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "7/7 [==============================] - 2s 306ms/step - loss: 1.4972 - accuracy: 0.3024\n",
            "Accuracy : 0.3024\n",
            "7/7 [==============================] - 2s 305ms/step - loss: 1.4972 - accuracy: 0.3024\n",
            "\n",
            "Loss: 1.4971528053283691, Acc: 0.30243903398513794\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 945
        },
        "id": "03EgVD9bI03A",
        "outputId": "e95a186a-7a05-4be3-c713-d66c013d7451"
      },
      "source": [
        "## summarize history for accuracy\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "## summarize history for loss\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "# Evaluation of model\n",
        "y_pred = model.predict(X_test)\n",
        "y_pred = np.argmax(y_pred, axis=0)\n",
        "y_test = np.argmax(y_test, axis=0)\n",
        "#print('y_test: ', y_test)\n",
        "\n",
        "print('report\\n')\n",
        "print(classification_report(y_test, y_pred))"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "report\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-31-1b65ffa20516>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'report\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclassification_report\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36mclassification_report\u001b[0;34m(y_true, y_pred, labels, target_names, sample_weight, digits, output_dict, zero_division)\u001b[0m\n\u001b[1;32m   1969\u001b[0m     \"\"\"\n\u001b[1;32m   1970\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1971\u001b[0;31m     \u001b[0my_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1972\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1973\u001b[0m     \u001b[0mlabels_given\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36m_check_targets\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m     78\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0marray\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindicator\u001b[0m \u001b[0mmatrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m     \"\"\"\n\u001b[0;32m---> 80\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m     \u001b[0mtype_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m     \u001b[0mtype_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \"\"\"\n\u001b[1;32m    207\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m     \u001b[0mlengths\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_num_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mX\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mX\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m     \u001b[0muniques\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \"\"\"\n\u001b[1;32m    207\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m     \u001b[0mlengths\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_num_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mX\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mX\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m     \u001b[0muniques\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_num_samples\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m    150\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m             raise TypeError(\"Singleton array %r cannot be considered\"\n\u001b[0;32m--> 152\u001b[0;31m                             \" a valid collection.\" % x)\n\u001b[0m\u001b[1;32m    153\u001b[0m         \u001b[0;31m# Check that shape is returning an integer or default to len\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    154\u001b[0m         \u001b[0;31m# Dask dataframes may not return numeric shape[0] value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: Singleton array 3 cannot be considered a valid collection."
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SgizBH-H74Rl",
        "outputId": "61ceeeb5-b618-4d25-c44d-13a95cc3cc54"
      },
      "source": [
        "# Confusion Matrix\n",
        "cm = confusion_matrix(y_test, y_pred) \n",
        "print('confusion matrix:\\n ', cm)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "confusion matrix:\n",
            "  [[0 0 0 0 0 0 1 0]\n",
            " [0 0 0 0 1 0 0 0]\n",
            " [0 0 0 0 0 1 0 0]\n",
            " [0 0 0 0 0 0 0 1]\n",
            " [0 0 0 0 0 0 0 0]\n",
            " [0 0 0 0 0 0 0 0]\n",
            " [0 0 0 0 0 0 0 0]\n",
            " [0 0 0 0 0 0 0 0]]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}